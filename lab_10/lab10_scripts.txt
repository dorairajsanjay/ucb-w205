Step-1. Getting Started
-----------------------
from pyspark import SparkContext
from pyspark.streaming import StreamingContext
ssc = StreamingContext(sc, 1)
lines= ssc.textFileStream("file:///tmp/datastreams")
uclines = lines.map(lambda word: word.upper())
uclines = uclines.filter(lambda word: len(word) > 5)
uclines.pprint()
ssc.start()

ssc.stop()


Step-2. Connecting to Socket and batch time
--------------------------------------------

$MASTER=local[4] pyspark

1-second duration
-----------------

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
ssc = StreamingContext(sc, 1)

lines = ssc.socketTextStream("localhost", 9999)
uclines= lines.map(lambda word: word.upper())
uclines.pprint()
ssc.start()

30-second duration
-----------------

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
ssc = StreamingContext(sc, 30)

lines = ssc.socketTextStream("localhost", 9999)
uclines= lines.map(lambda word: word.upper())
uclines.pprint()
ssc.start()

Step-3. Parsing JSON data
--------------------------

MASTER=local[4] pyspark

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
import json
ssc = StreamingContext(sc, 10)
lines = ssc.textFileStream("file:///tmp/datastreams")
slines = lines.flatMap(lambda x: [ j['venue'] for j in json.loads('['+x+']') if 'venue' in j] )
cnt=slines.count()
cnt.pprint()
slines.pprint()
slines.saveAsTextFiles("file:///tmp/venues.txt")

ssc.start()

Step-4. Hooking up to a simple stream.
--------------------------------------

MASTER=local[4] pyspark

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
import json
ssc = StreamingContext(sc, 10)
lines = ssc.socketTextStream("localhost", 9999)
jslines = lines.flatMap(lambda x: [ j['venue'] for j in
json.loads('['+x+']') if 'venue' in j] )
lcnt=lines.count()
lcnt.pprint()
c=jslines.count()
c.pprint()
jslines.pprint()
ssc.start()

curl -i http://stream.meetup.com/2/rsvps | nc -lk 9999

script â€“q -c/dev/null curl -i http://stream.meetup.com/2/rsvps  | nc -lk 9999

Step-5. Running with spark-submit
---------------------------------


from pyspark import SparkContext
from pyspark.streaming import StreamingContext
import json
sc = SparkContext("local[4]", "MyApp")
ssc = StreamingContext(sc, 10)
lines = ssc.socketTextStream("localhost", 9999)
jslines = lines.flatMap(lambda x: [ j['venue'] for j in json.loads('['+x+']') if 'venue' in j] )
lcnt=lines.count()
lcnt.pprint()
c=jslines.count()
c.pprint()
jslines.pprint()
ssc.start()
ssc.awaitTermination()

curl -i http://stream.meetup.com/2/rsvps | nc -lk 9999

Step-6. Sliding Window
----------------------

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
import json
sc = SparkContext("local[4]", "MyApp")
ssc = StreamingContext(sc, 10)
ssc.checkpoint("file:///tmp/checkpointing")
lines = ssc.socketTextStream("localhost", 9999)
wlcnt=lines.countByWindow(30,10)
jslines = lines.flatMap(lambda x: [ j['venue'] for j in
json.loads('['+x+']') if 'venue' in j] )
lcnt=lines.count()
wlcnt.pprint()
lcnt.pprint()
c=jslines.count()
c.pprint()
jslines.pprint()
ssc.start()
ssc.awaitTermination()
